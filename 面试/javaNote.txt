任何public非static函数的调用都是多态的

volatile：多任务环境下的共享标志,该变量不稳定，每次使用需要从主存中读取，改变之后也需要写入主存,这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。
1）volatile本质是在告诉jvm当前变量在寄存器中的值是不确定的,需要从主存中读取,synchronized则是锁定当前变量,只有当前线程可以访问该变量,其他线程被阻塞住.
2）volatile仅能使用在变量级别,synchronized则可以使用在变量,方法.
3）volatile仅能实现变量的修改可见性,而synchronized则可以保证变量的修改可见性和原子性.
　　《Java编程思想》上说，定义long或double变量时，如果使用volatile关键字，就会获得（简单的赋值与返回操作）原子性
4）volatile不会造成线程的阻塞,而synchronized可能会造成线程的阻塞.


byte b=1;
b+=10;//+=隐式类型转换
System.out.println(b);
被编译成了
int i = 1;
i = (byte)(i + 10);
System.out.println(i);

强引用：如果一个对象具有强引用，那垃圾回收器绝不会回收它
软引用：内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存
弱引用：一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存
虚引用：虚引用必须和引用队列 （ReferenceQueue）联合使用

栈常用于保存方法帧和局部变量，而对象总是在堆上分配。
栈通常都比堆小，也不会在多个线程之间共享，而堆被整个 JVM 的所有线程共享。

hashCode() 方法是相应对象整型的 hash 值。它常用于基于 hash 的集合类，两个使用 equal() 方法来判断相等的对象，必须具有相同的 hash code。

Class.getResourceAsStream(String path) ： path 不以’/'开头时默认是从此类所在的包下取资源，以’/'开头则是从ClassPath根下获取。其只是通过path构造一个绝对路径，最终还是由 ClassLoader获取资源。


线程池 isShutdown和isTerminated的区别
isShutDown当调用shutdown()方法后返回为true。 
isTerminated当调用shutdown()方法后，并且所有提交的任务完成后返回为true



Java类初始化数据域的顺序：
1、父类的静态域和静态初始化块
2、子类的静态域和静态初始化块
3、父类的实例域和实例初始化块
4、父类的构造方法
5、子类的实例域和实例初始化块
6、子类的构造方法

this：1、隐式参数；2、调用该类的其他构造器
super：1、调用父类的方法；2、调用父类的构造器

多态：一个对象变量既可以引用该类的变量，也可以引用子类的对象
调用对象方法f的过程：
1、按照方法签名寻找方法
（1）查看对象的实际类型和方法名，列出该类中名为f的方法，父类中public且名为f的方法；
（2）查看参数类型，找到参数类型完全匹配的方法；
2、按照绑定类型决定调用的方法
（1）private,static,final方法，构造器，则准确知道调用的方法，静态绑定（程序运行前绑定）；
（2）调用引用对象实际类型最合适的类的方法，动态绑定（运行时绑定）
或者：
1、提取实际类型的方法表
2、按照签名搜索方法
3、虚拟机调用方法

VM实例的运行期类型选择要调用的override方法

作用--要求JVM查找并加载指定的类，JDBC规范中明确要求这个Driver类必须向DriverManager注册自己
Class.forName("com.mysql.jdbc.Driver");
connection = DriverManager.getConnection(url,user,password);

整数的原码、反码、补码一样。
负数的反码：负数原码符号位不变，其余取反。
负数的补码：与对应的正数的原码的和为2^32；负数的反码+1。